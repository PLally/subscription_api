// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionAPIClient is the client API for SubscriptionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionAPIClient interface {
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error)
	UnSubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Success, error)
	ListSubscriptions(ctx context.Context, in *Destination, opts ...grpc.CallOption) (*SubscriptionList, error)
}

type subscriptionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionAPIClient(cc grpc.ClientConnInterface) SubscriptionAPIClient {
	return &subscriptionAPIClient{cc}
}

func (c *subscriptionAPIClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/SubscriptionAPI/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAPIClient) UnSubscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/SubscriptionAPI/UnSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAPIClient) ListSubscriptions(ctx context.Context, in *Destination, opts ...grpc.CallOption) (*SubscriptionList, error) {
	out := new(SubscriptionList)
	err := c.cc.Invoke(ctx, "/SubscriptionAPI/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionAPIServer is the server API for SubscriptionAPI service.
// All implementations must embed UnimplementedSubscriptionAPIServer
// for forward compatibility
type SubscriptionAPIServer interface {
	Subscribe(context.Context, *Subscription) (*Subscription, error)
	UnSubscribe(context.Context, *Subscription) (*Success, error)
	ListSubscriptions(context.Context, *Destination) (*SubscriptionList, error)
	mustEmbedUnimplementedSubscriptionAPIServer()
}

// UnimplementedSubscriptionAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionAPIServer struct {
}

func (UnimplementedSubscriptionAPIServer) Subscribe(context.Context, *Subscription) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscriptionAPIServer) UnSubscribe(context.Context, *Subscription) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribe not implemented")
}
func (UnimplementedSubscriptionAPIServer) ListSubscriptions(context.Context, *Destination) (*SubscriptionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedSubscriptionAPIServer) mustEmbedUnimplementedSubscriptionAPIServer() {}

// UnsafeSubscriptionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionAPIServer will
// result in compilation errors.
type UnsafeSubscriptionAPIServer interface {
	mustEmbedUnimplementedSubscriptionAPIServer()
}

func RegisterSubscriptionAPIServer(s grpc.ServiceRegistrar, srv SubscriptionAPIServer) {
	s.RegisterService(&SubscriptionAPI_ServiceDesc, srv)
}

func _SubscriptionAPI_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAPIServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionAPI/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAPIServer).Subscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAPI_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAPIServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionAPI/UnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAPIServer).UnSubscribe(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAPI_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Destination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAPIServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionAPI/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAPIServer).ListSubscriptions(ctx, req.(*Destination))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionAPI_ServiceDesc is the grpc.ServiceDesc for SubscriptionAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SubscriptionAPI",
	HandlerType: (*SubscriptionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscriptionAPI_Subscribe_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _SubscriptionAPI_UnSubscribe_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _SubscriptionAPI_ListSubscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sub_api.proto",
}
